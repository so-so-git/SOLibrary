using System;
using System.IO;
using System.Text;

namespace SO.Library.IO
{
    /// <summary>
    /// HTMLファイルへのロギング機能提供クラス
    /// </summary>
    public sealed class HtmlLogger : Logger
    {
        #region クラス定数

        /// <summary>識別署名コメント</summary>
        private const string SIGNATURE_COMMENT = "<!-- Generated by SO.Library.IO.HtmlLogger. -->";

        /// <summary>最新出力位置コメント</summary>
        private const string LATEST_COMMENT = "<!-- Latest output line. -->";

        #endregion

        #region コンストラクタ

        /// <summary>
        /// デフォルトのコンストラクタです。
        /// </summary>
        /// <param name="logPath">ログファイルパス</param>
        public HtmlLogger(string logPath)
            : base(logPath, Encoding.GetEncoding("Shift_JIS")) { }

        #endregion

        #region RotationLogFile - ログファイルローテーション

        /// <summary>
        /// ログファイルのローテーションを行います。
        /// </summary>
        protected override void RotationLogFile()
        {
            // ログファイル存在確認
            if (File.Exists(_logFile.FullName))
            {
                if (!IsGeneratedByOwn())
                {
                    // 自身で生成したログでない場合はバックアップ
                    File.Move(_logFile.FullName, _logFile.FullName + "_backup-" + DateTime.Today.ToString("yyyy.MM.dd"));

                    // Createメソッドでログファイル作成、Streamを即解放
                    using (File.Create(_logFile.FullName)) { }
                }
                else if (File.GetLastAccessTime(_logFile.FullName).Date.CompareTo(DateTime.Today) != 0)
                {
                    // ファイルローテーション
                    File.Move(_logFile.FullName, _logFile.FullName + "-" + DateTime.Today.ToString("yyyy.MM.dd"));

                    // Createメソッドでログファイル作成、Streamを即解放
                    using (File.Create(_logFile.FullName)) { }
                }
            }
            else
            {
                // Createメソッドでログファイル作成、Streamを即解放
                using (File.Create(_logFile.FullName)) { }
            }
        }

        #endregion

        #region CreateNewLog - 新規ログファイル作成

        /// <summary>
        /// 空の新規ログファイルを作成します。
        /// </summary>
        protected override void CreateNewLog()
        {
            var template = new StringBuilder();
            template.AppendLine(SIGNATURE_COMMENT);
            template.AppendLine("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">");
            template.AppendLine("<html>");
            template.AppendLine("  <head>");
            template.AppendLine("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=shift_jis\">");
            template.AppendLine("    <title>" + Path.GetFileNameWithoutExtension(_logFile.Name) + "</title>");
            template.AppendLine("  </head>");
            template.AppendLine("  <body>");
            template.AppendLine("    <table border>");
            template.AppendLine("      <tr>");
            template.AppendLine("        <th width=\"25%\">発生日時</th>");
            template.AppendLine("        <th width=\"25%\">発生箇所</th>");
            template.AppendLine("        <th width=\"75%\">メッセージ</th>");
            template.AppendLine("      </tr>");
            template.AppendLine(LATEST_COMMENT);
            template.AppendLine("    </table>");
            template.AppendLine("  </body>");
            template.AppendLine("</html>");
            template.AppendLine("");

            lock (_lockObj)
            {
                using (var sw = new StreamWriter(_logFile.FullName, true, _encoding))
                {
                    sw.WriteLine(template.ToString());
                    sw.Flush();
                }
            }
        }

        #endregion

        #region IsGeneratedByOwn - 自身で生成したログかを判定

        /// <summary>
        /// 自身で生成したログかを判定します。
        /// </summary>
        /// <returns>自身で生成したログの場合はtrue</returns>
        private bool IsGeneratedByOwn()
        {
            string bfr = null;
            using (var sr = new StreamReader(_logFile.FullName, _encoding))
            {
                bfr = sr.ReadLine();
            }

            return bfr == SIGNATURE_COMMENT;
        }

        #endregion

        #region WriteLog - ログ書込

        /// <summary>
        /// クラス名、メソッド名を含めて処理ログをログファイルに書き込みます。
        /// </summary>
        /// <param name="className">ログ出力元クラス名</param>
        /// <param name="methodName">ログ出力元メソッド名</param>
        /// <param name="message">処理ログメッセージ</param>
        public override void WriteLog(string className, string methodName, string message)
        {
            WriteCommon(className, methodName, message);
        }

        #endregion

        #region WriteErrorLog - エラーログ書込

        /// <summary>
        /// 例外補足情報付きのエラーログをログファイルに書き込みます。
        /// </summary>
        /// <param name="className">例外発生元クラス名</param>
        /// <param name="methodName">例外発生元メソッド名</param>
        /// <param name="ex">例外オブジェクト</param>
        /// <param name="optionMessage">例外補足情報</param>
        public override void WriteErrorLog(string className, string methodName, Exception ex, string optionMessage)
        {
            // 出力文字列構築
            var sb = new StringBuilder();
            sb.AppendLine(ex.ToString());

            // 補足情報追加
            if (optionMessage != null)
            {
                sb.AppendLine("[補足情報]");
                sb.AppendLine(optionMessage);
            }

            WriteCommon(className, methodName, sb.ToString());
        }

        #endregion

        #region WriteCommon - 出力共通処理

        /// <summary>
        /// 共通のログ出力処理です。
        /// </summary>
        /// <param name="className">例外発生元クラス名</param>
        /// <param name="methodName">例外発生元メソッド名</param>
        /// <param name="message">出力内容</param>
        private void WriteCommon(string className, string methodName, string message)
        {
            var tmpFile = new FileInfo(Path.GetTempFileName());

            lock (_lockObj)
            {
                using (var sr = new StreamReader(_logFile.FullName, _encoding))
                using (var sw = new StreamWriter(tmpFile.FullName, true, _encoding))
                {
                    string bfr;
                    while ((bfr = sr.ReadLine()) != null)
                    {
                        if (bfr == LATEST_COMMENT)
                        {
                            // 今回の追記内容を出力
                            sw.WriteLine(CreateLine(className, methodName, message));
                        }

                        // 元ファイルの内容を移行
                        sw.WriteLine(bfr);
                    }

                    sw.Flush();
                }

                // ファイル作成日時を移行し、ファイルをすり替え
                tmpFile.CreationTime = _logFile.CreationTime;
                _logFile.Delete();
                tmpFile.MoveTo(_logFile.FullName);
            }
        }

        #endregion

        #region CreateLine - 1行分のHTML文字列を生成

        /// <summary>
        /// 1行分のHTML文字列を生成します。
        /// </summary>
        /// <param name="className">例外発生元クラス名</param>
        /// <param name="methodName">例外発生元メソッド名</param>
        /// <param name="message">ログメッセージ</param>
        /// <returns>1行分のHTML文字列</returns>
        private string CreateLine(string className, string methodName, string message)
        {
            string logDateTime = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss");

            string logPlace;
            if (string.IsNullOrEmpty(className))
            {
                logPlace = string.Empty;
            }
            else
            {
                if (string.IsNullOrEmpty(methodName))
                {
                    logPlace = className;
                }
                else
                {
                    logPlace = string.Format("{0}#{1}", className, methodName);
                }
            }

            var sb = new StringBuilder();
            sb.AppendLine("      <tr>");
            sb.AppendLine("        <td>" + logDateTime + "発生日時</td>");
            sb.AppendLine("        <td>" + logPlace + "</td>");
            sb.AppendLine("        <td>" + message + "</td>");
            sb.AppendLine("      </tr>");

            return sb.ToString();
        }

        #endregion
    }
}
